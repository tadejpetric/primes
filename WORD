Namen naloge je bil pojasniti koncepte praštevil, dokazati izreke, ki držijo o praštevilih in napisati programe za iskanje praštevil raznih tipov.
Programsko kodo smo pisali v jeziku C++ v razvojnih orodjih Visual Studio 2013, Visual Studio 2015 ter CodeBlocks. Vključili smo tudi predprograme cmath, iostream, iomanip, fstream, new ter limits, ki pa se nahajajo v standardu jezika C++. Uporabili smo še lastne osebne računalnike ter enokomponentni računalnik Raspberry Pi. Kodo smo si delili prek storitve Pastebin ter GitHub.
Začeli smo s pisanjem osnovnega programa, ki preveri, če je dano število praštevilo. To smo naredili tako, da smo uporabili števec, ki preiskuša vsako vrednost med dva in polovico danega števila ter izračuna ostanek pri deljenju danega števila s števcem. Če je v kateri koli točki ostanek pri deljenju enak nič, pomeni da dano število ni praštevilo, saj je deljivo s števcem. Za tem je sledil program, ki išče praštevila manjša od vpisane vrednosti. Za to smo predelali program za preverjanje, če je dano število praštevilo ter mu dodali števec, ki preiskuša vse celoštevilčne vhode do dane vrednosti. Praštevilske dvojčke smo iskali tako, da smo ob vsakem najdenem praštevilu preverili, če je število, ki je za dva večje od trenutnega tudi praštevilo. Če je smo izpisali oba. Naš četrti program, ki spada med osnove praštevil je razdelil vhod na prafaktorje. To smo naredili s preurejenim programom za preverjanje, če je število praštevilo, le da vsakič ko je najdel števec, ki deli vpisano število je izpisal števec, delil vpisano število s števcem ter ponastavil števec. Ko je ta števec prišel do polovice preiskušenega števila je izpisal to število ter zaklučil program. Sledil je še program, ki temelji na Erastotnevem situ. Ta za dano dano vrednost naredi kvadrat s tako velikimi stranicami. Nato vsako število v prvi vrstici razen ena množi s števcem, dokler rezultat ne presega največje vrednosti v tabeli, to je vpisana vrednost na kvadrat. Vsako vrednost, ki jo izračuna prek te metode jo onemogoči, na koncu programa pa le prebere preostale vrednosti.
Zaradi časovne ali spominske potratnosti pa se te metode redko uporabljajo pri višjih vrednostih, običajno se uporabljajo le do nekje deset tisoč. Pri višjih vrednostih se pogosto uporabljajo predprogrami, ki hitro izničijo vrednost, če ta ni praštevilo vendar pa so pogosto le deloma zanesljivi saj moramo na preostale vrednosti izvesti enega zgornjih programov ali pa so specifične saj delujejo le da določene vrste praštevil. Naredili smo tri take predprograme, od tega sta dva splošna, en pa temelji na posebni vrsti praštevil.
Prvi manjši predprogram temelji na malem Fermatovem izreku, ki pravi da za dano praštevilo p izrek (a^p  - a)%p = 0 velja za vsak a, manjši od p. Naredili smo da uporabnik lastnoročno vpiše interval vrednosti (a ali p), ter eno vrednost (obratno kot prej). Potem program preveri enačbo za vse vrednosti v intervalu. Če za interval vrednosti a izberemo [2, p-1] bo rezultat kar natančen, vendar pa obstajajo vrednosti p, ki zadostijo pogoju, vendar pa niso praštevila. Takoj ko pa najdemo eno vrednost a, za katero pogoj ne drži vemo da p ni praštevilo.
Naslednji program temelji na Lucasevih številih. To so števila pridobljena na podoben način kot Fibonaccijeva števila, le da za začetek uporabimo vrednosti ena in tri, namesto ena in ena (potem funkcija deluje rekurzivno; prvi dve vrednosti se seštejeta v tretjo, druga vrednost postane prva, tretja vrednost pa druga. Potem se ponavlja v neskončnost). Mi vpišemo število, ki jo želimo preveriti, program izračuna vrednost na tem mestu v Lucasevem zaporedju ter tej vrednosti odšteje 1. Program pogleda če je dobljeno število deljivo z našim, vpisanim številom ter če je, je naše izbrano število mogoče praštevilo. Če pa število ni deljivo z našim vhodom pa vhod zagotovo ni praštevilo.
Zadnji izmed programov pa vključuje praštevila posebne oblike, Mersenne praštevila. To so praštevila, ki jih je mogoče napisati v obliki 2^n-1. Za osnovo smo najprej naredili program, ki le poiskuša vse vrednosti n do izbranega števila. Vsako izmed teh vrednosti n, preveri s preprostimi algoritmi. Za naprednejši test pa smo uporabili Lucas-Lehmer test. To zaporedje išče mesto n v zaporedju Lucas-Lehmer. To zaporednje se začne s štiri, število kvadrira ter odšteje dva ter to ponavlja v neskončnost. Saj se to zaporedje prehitro povečuje za računalnike lahko na koncu vsakega koraka uporabim ostanek pri deljenju našega praštevila; formula za to zaporedje potem izgleda l=(l^2-2)%stevilo (ponovimo n-krat). S tem povišamo najvišjo možno odkrito potenco praštevila tipa Mersenne iz šest na enaintrideset. Da preverimo če je naš vhod praštevilo le izračunamo ostanek pri deljenju tega člena z našim vhodom, če je ostanek nič je naše število zagotovo Mersenne praštevilo, če ostanek ni nič pa zagotovo ni.
Naučili smo se tudi dokazati nekaj trditev o praštevilih, recimo da je praštevil neskončno, da je vsako število narejeno iz praštevil ter da je le en način, po katerem lahko sestavimo poljubno število iz praštevil. Videli smo tudi kako pogosta so praštevila z naraščanjem njihove vrednosti.
